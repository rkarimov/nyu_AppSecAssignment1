        -:    0:Source:giftcardreaderfixed.c
        -:    0:Source is newer than graph
        -:    1:/*
        -:    2: * Gift Card Reading Application
        -:    3: * Original Author: Shoddycorp's Cut-Rate Contracting
        -:    4: * Comments added by: Justin Cappos (JAC) and Brendan Dolan-Gavitt (BDG)
        -:    5: * Maintainer:
        -:    6: * Date: 8 July 2020
        -:    7: */
        -:    8:
        -:    9:
        -:   10:#include "giftcard.h"
        -:   11:
        -:   12:#include <stdio.h>
        -:   13:#include <strings.h>
        -:   14:#include <string.h> // LOGIC FIX: adding to alleviate warning during compiling of the program
        -:   15:
        -:   16:// interpreter for THX-1138 assembly
function animate called 5 returned 100% blocks executed 50%
        5:   17:void animate(char *msg, unsigned char *program) {
        -:   18:    unsigned char regs[16];
        5:   19:    char *mptr = msg;
        5:   20:    unsigned char *pc = program;
        5:   21:    int i = 0;
        5:   22:    int zf = 0;
      352:   23:    while (1) {
        -:   24:        unsigned char op, arg1, arg2;
      357:   25:        op = *pc;
      357:   26:        arg1 = *(pc+1);
      357:   27:        arg2 = *(pc+2);
      357:   28:        switch (*pc) {
branch  0 taken 338
branch  1 taken 4
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 1
branch 10 taken 0
branch 11 taken 14
      338:   29:            case 0x00:
      338:   30:                break;
        4:   31:            case 0x01:
        4:   32:                regs[arg1] = *mptr;
        4:   33:                break;
    #####:   34:            case 0x02:
    #####:   35:                *mptr = regs[arg1];
    #####:   36:                break;
    #####:   37:            case 0x03:
    #####:   38:                mptr += (char)arg1;
    #####:   39:                break;
    #####:   40:            case 0x04:
    #####:   41:                regs[arg2] = arg1;
    #####:   42:                break;
    #####:   43:            case 0x05:
    #####:   44:                regs[arg1] ^= regs[arg2];
    #####:   45:                zf = !regs[arg1];
    #####:   46:                break;
    #####:   47:            case 0x06:
    #####:   48:                regs[arg1] += regs[arg2];
    #####:   49:                zf = !regs[arg1];
    #####:   50:                break;
    #####:   51:            case 0x07:
    #####:   52:                puts(msg);
call    0 never executed
    #####:   53:                break;
    #####:   54:            case 0x08:
    #####:   55:                goto done;
        1:   56:            case 0x09:
        1:   57:                pc += (unsigned char)arg1; // HANG FIX: make this an unsigned character which only takes positive values  // https://www.cs.utah.edu/~germain/PPS/Topics/unsigned_integer.html
        1:   58:                break;
    #####:   59:            case 0x10:
    #####:   60:                if (zf) pc += (char)arg1;
branch  0 never executed
branch  1 never executed
    #####:   61:                break;
        -:   62:        }
      357:   63:        pc+=3;
      357:   64:        if (pc > program+256) break;
branch  0 taken 5 (fallthrough)
branch  1 taken 352
        -:   65:    }
        5:   66:done:
        5:   67:    return;
        -:   68:}
        -:   69:
function print_gift_card_info called 11 returned 100% blocks executed 82%
       11:   70:    void print_gift_card_info(struct this_gift_card *thisone) {
        -:   71:	struct gift_card_data *gcd_ptr;
        -:   72:	struct gift_card_record_data *gcrd_ptr;
        -:   73:	struct gift_card_amount_change *gcac_ptr;
        -:   74:    struct gift_card_program *gcp_ptr;
       11:   75:	gcd_ptr = thisone->gift_card_data;
        -:   76:    (unsigned int)gcac_ptr->amount_added; //fuzz 2 fix
       11:   77:
call    0 returned 11
       11:   78:	printf("   Merchant ID: %32.32s\n",gcd_ptr->merchant_id);
call    0 returned 11
       11:   79:	printf("   Customer ID: %32.32s\n",gcd_ptr->customer_id);
call    0 returned 11
 33554452:   80:	printf("   Num records: %d\n",gcd_ptr->number_of_gift_card_records);
branch  0 taken 33554441
branch  1 taken 11 (fallthrough)
 33554441:   81:	for(int i=0;i<gcd_ptr->number_of_gift_card_records; i++) {
 33554441:   82:  		gcrd_ptr = (struct gift_card_record_data *) gcd_ptr->gift_card_record_data[i];
branch  0 taken 0 (fallthrough)
branch  1 taken 33554441
    #####:   83:		if (gcrd_ptr->type_of_record == 1) {
call    0 never executed
    #####:   84:			printf("      record_type: amount_change\n");
    #####:   85:			gcac_ptr = gcrd_ptr->actual_record;
call    0 never executed
    #####:   86:			printf("      amount_added: %d\n",gcac_ptr->amount_added);
branch  0 never executed
branch  1 never executed
    #####:   87:			if (gcac_ptr->amount_added>0) {
call    0 never executed
        -:   88:				printf("      signature: %32.32s\n",gcac_ptr->actual_signature);
        -:   89:			}
 33554441:   90:		}	
branch  0 taken 2 (fallthrough)
branch  1 taken 33554439
        2:   91:		else if (gcrd_ptr->type_of_record == 2) {
call    0 returned 2
        2:   92:			printf("      record_type: message\n");
call    0 returned 2
        -:   93:			printf("      message: %s\n",(char *)gcrd_ptr->actual_record);
 33554439:   94:		}
branch  0 taken 5 (fallthrough)
branch  1 taken 33554434
        5:   95:		else if (gcrd_ptr->type_of_record == 3) {
        5:   96:            gcp_ptr = gcrd_ptr->actual_record;
call    0 returned 5
        5:   97:			printf("      record_type: animated message\n");
call    0 returned 5
        5:   98:            printf("      message: %s\n", gcp_ptr->message);
call    0 returned 5
        5:   99:            printf("  [running embedded program]  \n");
call    0 returned 5
        -:  100:            animate(gcp_ptr->message, gcp_ptr->program);
        -:  101:		}
       11:  102:	}
call    0 returned 11
call    1 returned 11
       11:  103:	printf("  Total value: %d\n\n",get_gift_card_value(thisone));
        -:  104:}
        -:  105:
function gift_card_json called 2 returned 100% blocks executed 78%
        2:  106:// Added to support web functionalities
        -:  107:void gift_card_json(struct this_gift_card *thisone) {
        -:  108:    struct gift_card_data *gcd_ptr;
        -:  109:    struct gift_card_record_data *gcrd_ptr;
        2:  110:    struct gift_card_amount_change *gcac_ptr;
        2:  111:    gcd_ptr = thisone->gift_card_data;
call    0 returned 2
        2:  112:    printf("{\n");
call    0 returned 2
        2:  113:    printf("  \"merchant_id\": \"%32.32s\",\n", gcd_ptr->merchant_id);
call    0 returned 2
        2:  114:    printf("  \"customer_id\": \"%32.32s\",\n", gcd_ptr->customer_id);
call    0 returned 2
call    1 returned 2
        2:  115:    printf("  \"total_value\": %d,\n", get_gift_card_value(thisone));
call    0 returned 2
        -:  116:    printf("  \"records\": [\n");
        3:  117:
branch  0 taken 1
branch  1 taken 2 (fallthrough)
        1:  118:	for(int i=0;i<gcd_ptr->number_of_gift_card_records; i++) {
        1:  119:        gcrd_ptr = (struct gift_card_record_data *) gcd_ptr->gift_card_record_data[i];
call    0 returned 1
        1:  120:        printf("    {\n");
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  121:        if (gcrd_ptr->type_of_record == 1) {
call    0 never executed
    #####:  122:            printf("      \"record_type\": \"amount_change\",\n");
    #####:  123:            gcac_ptr = gcrd_ptr->actual_record;
call    0 never executed
    #####:  124:            printf("      \"amount_added\": %d,\n",gcac_ptr->amount_added);
branch  0 never executed
branch  1 never executed
    #####:  125:            if (gcac_ptr->amount_added>0) {
call    0 never executed
        -:  126:                printf("      \"signature\": \"%32.32s\"\n",gcac_ptr->actual_signature);
        -:  127:            }
        1:  128:        }
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  129:        else if (gcrd_ptr->type_of_record == 2) {
call    0 never executed
    #####:  130:			printf("      \"record_type\": \"message\",\n");
call    0 never executed
        -:  131:			printf("      \"message\": \"%s\"\n",(char *)gcrd_ptr->actual_record);
        1:  132:        }
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  133:        else if (gcrd_ptr->type_of_record == 3) {
        1:  134:            struct gift_card_program *gcp = gcrd_ptr->actual_record;
call    0 returned 1
        1:  135:			printf("      \"record_type\": \"animated message\",\n");
call    0 returned 1
        -:  136:			printf("      \"message\": \"%s\",\n",gcp->message);
        1:  137:            // programs are binary so we will hex for the json
        -:  138:            char *hexchars = "01234567890abcdef";
        1:  139:            char program_hex[512+1];
        -:  140:            program_hex[512] = '\0';
      257:  141:            int i;
branch  0 taken 256
branch  1 taken 1 (fallthrough)
      256:  142:            for(i = 0; i < 256; i++) {
      256:  143:                program_hex[i*2] = hexchars[((gcp->program[i] & 0xf0) >> 4)];
        -:  144:                program_hex[i*2+1] = hexchars[(gcp->program[i] & 0x0f)];
        1:  145:            }
call    0 returned 1
        -:  146:			printf("      \"program\": \"%s\"\n",program_hex);
        1:  147:        }
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  148:        if (i < gcd_ptr->number_of_gift_card_records-1)
call    0 never executed
        -:  149:            printf("    },\n");
        1:  150:        else
call    0 returned 1
        -:  151:            printf("    }\n");
        2:  152:    }
call    0 returned 2
        2:  153:    printf("  ]\n");
call    0 returned 2
        2:  154:    printf("}\n");
        -:  155:}
function get_gift_card_value called 13 returned 100% blocks executed 86%
       13:  156:
        -:  157:int get_gift_card_value(struct this_gift_card *thisone) {
        -:  158:	struct gift_card_data *gcd_ptr;
        -:  159:	struct gift_card_record_data *gcrd_ptr;
       13:  160:	struct gift_card_amount_change *gcac_ptr;
        -:  161:	int ret_count = 0;
       13:  162:
 33554455:  163:	gcd_ptr = thisone->gift_card_data;
branch  0 taken 33554442
branch  1 taken 13 (fallthrough)
 33554442:  164:	for(int i=0;i<gcd_ptr->number_of_gift_card_records; i++) {
 33554442:  165:  		gcrd_ptr = (struct gift_card_record_data *) gcd_ptr->gift_card_record_data[i];
branch  0 taken 0 (fallthrough)
branch  1 taken 33554442
    #####:  166:		if (gcrd_ptr->type_of_record == 1) {
    #####:  167:			gcac_ptr = gcrd_ptr->actual_record;
        -:  168:			ret_count += gcac_ptr->amount_added;
        -:  169:		}	
       13:  170:	}
        -:  171:	return ret_count;
        -:  172:}
        -:  173:
        -:  174:
        -:  175:
function gift_card_reader called 13 returned 100% blocks executed 89%
       13:  176:/* JAC: input_fd is misleading... It's a FILE type, not a fd */
        -:  177:struct this_gift_card *gift_card_reader(FILE *input_fd) {
       13:  178:
        -:  179:	struct this_gift_card *ret_val = malloc(sizeof(struct this_gift_card));
        -:  180:
        -:  181:    void *optr;
        -:  182:	void *ptr;
        -:  183:
       28:  184:	// Loop to do the whole file
call    0 returned 28
branch  1 taken 15
branch  2 taken 13 (fallthrough)
        -:  185:	while (!feof(input_fd)) {
        -:  186:
        -:  187:		struct gift_card_data *gcd_ptr;
        -:  188:		/* JAC: Why aren't return types checked? */
        -:  189:
        -:  190:        //crash1 fix
        -:  191:        // creating an unsigned int value for malloc  and read it in
        -:  192:        // using an unsigned int b/c the value will always have to be non-negative 
       15:  193:        // source https://www.cs.utah.edu/~germain/PPS/Topics/unsigned_integer.html
       15:  194:        unsigned int absolute_value = ret_val-> num_bytes;
call    0 returned 15
        -:  195:        fread(&absolute_value, 4,1, input_fd);
        -:  196:
       15:  197:		// Make something the size of the rest and read it in
       15:  198:		ptr = malloc(abs(absolute_value));
call    0 returned 15
       15:  199:		fread(ptr, abs(absolute_value), 1, input_fd);
        -:  200:        optr = ptr-4;
       15:  201:
       15:  202:		gcd_ptr = ret_val->gift_card_data = malloc(sizeof(struct gift_card_data));
       15:  203:		gcd_ptr->merchant_id = ptr;
        -:  204:		ptr += 32;	
       15:  205://		printf("VD: %d\n",(int)ptr - (int) gcd_ptr->merchant_id);
       15:  206:		gcd_ptr->customer_id = ptr;
        -:  207:		ptr += 32;	
        -:  208:		/* JAC: Something seems off here... */
        -:  209:
       15:  210:        // LOGIC FIX: changing this to int as one shouldn't store a  number as a char
       15:  211:        //fuzz 1
        -:  212:		gcd_ptr->number_of_gift_card_records = *((int *)ptr);
       15:  213:		ptr += 4;
        -:  214:
        -:  215:		gcd_ptr->gift_card_record_data = (void *)malloc(gcd_ptr->number_of_gift_card_records*sizeof(void*));
 33554472:  216:
branch  0 taken 33554457
branch  1 taken 15 (fallthrough)
        -:  217:		// Now ptr points at the gift card recrod data
        -:  218:		for (int i=0; i<=gcd_ptr->number_of_gift_card_records; i++){
 33554457:  219:			//printf("i: %d\n",i);
        -:  220:			struct gift_card_record_data *gcrd_ptr;
 33554457:  221:			gcrd_ptr = gcd_ptr->gift_card_record_data[i] = malloc(sizeof(struct gift_card_record_data));
        -:  222:			struct gift_card_amount_change *gcac_ptr;
 33554457:  223:			gcac_ptr = gcrd_ptr->actual_record = malloc(sizeof(struct gift_card_record_data));
        -:  224:            struct gift_card_program *gcp_ptr;
 33554457:  225:			gcp_ptr = malloc(sizeof(struct gift_card_program));
        -:  226:
 33554457:  227:			gcrd_ptr->record_size_in_bytes = *((char *)ptr);
        -:  228:            //printf("rec at %x, %d bytes\n", ptr - optr, gcrd_ptr->record_size_in_bytes); 
 33554457:  229:			ptr += 4;	
 33554457:  230:			//printf("record_data: %d\n",gcrd_ptr->record_size_in_bytes);
        -:  231:			gcrd_ptr->type_of_record = *((char *)ptr);
        -:  232:			ptr += 4;	
        -:  233:            //printf("type of rec: %d\n", gcrd_ptr->type_of_record);
 33554457:  234:
branch  0 taken 0 (fallthrough)
branch  1 taken 33554457
    #####:  235:			// amount change
    #####:  236:			if (gcrd_ptr->type_of_record == 1) {
        -:  237:				gcac_ptr->amount_added = *((int*) ptr);
        -:  238:				ptr += 4;	
        -:  239:
        -:  240:				// don't need a sig if negative
        -:  241:				/* JAC: something seems off here */
    #####:  242:				if (gcac_ptr < 0) break;
    #####:  243:
        -:  244:				gcac_ptr->actual_signature = ptr;
        -:  245:				ptr+=32;
 33554457:  246:			}
branch  0 taken 2 (fallthrough)
branch  1 taken 33554455
        2:  247:			// message
        -:  248:			if (gcrd_ptr->type_of_record == 2) {
        -:  249:				gcrd_ptr->actual_record = ptr;
        2:  250:				// advance by the string size + 1 for nul
        -:  251:                // BDG: does not seem right
        -:  252:				ptr=ptr+strlen((char *)gcrd_ptr->actual_record)+1;
 33554457:  253:			}
branch  0 taken 6 (fallthrough)
branch  1 taken 33554451
        6:  254:            // BDG: never seen one of these in the wild
        6:  255:            if (gcrd_ptr->type_of_record == 3) {
        6:  256:                gcp_ptr->message = malloc(32);
        6:  257:                gcp_ptr->program = malloc(256);
        6:  258:                memcpy(gcp_ptr->message, ptr, 32);
        6:  259:                ptr+=32;
        6:  260:                memcpy(gcp_ptr->program, ptr, 256);
        -:  261:                ptr+=256;
        -:  262:                gcrd_ptr->actual_record = gcp_ptr;
        -:  263:            }
       13:  264:		}
        -:  265:	}
        -:  266:	return ret_val;
        -:  267:}
        -:  268:
        -:  269:// BDG: why not a local variable here?
        -:  270:struct this_gift_card *thisone;
        -:  271:
function main called 38 returned 34% blocks executed 86%
       38:  272:
        -:  273:/// CRASH 2 FIX -- empty argument passed 
       38:  274:int main(int argc, char **argv) {
call    0 returned 38
       38:  275:    // BDG: no argument checking?
branch  0 taken 25 (fallthrough)
branch  1 taken 13
       25:  276:    	FILE *input_fd = fopen(argv[2],"r");
call    0 returned 25
       25:  277:        if (input_fd == NULL ) {
call    0 returned 0
        -:  278:            printf("please re-enter the crash case, empty string passed!");
       13:  279:          //  exit(EXIT_FAILURE); I realized that I needed to fail w/o error otherwise it would break the git workflow
branch  0 taken 0 (fallthrough)
branch  1 taken 13
        -:  280:        }
    #####:  281:        else if (argc < 3)
call    0 never executed
    #####:  282:        {
call    0 never executed
        -:  283:            printf("please re-enter the crash case, empty string passed!");
        -:  284:            ///exit(EXIT_FAILURE); I realized that I needed to fail w/o error otherwise it would break the git workflow
       13:  285:        }
call    0 returned 13
       13:  286:        else {
branch  0 taken 11 (fallthrough)
branch  1 taken 2
call    2 returned 11
        2:  287:	    thisone = gift_card_reader(input_fd);
branch  0 taken 2 (fallthrough)
branch  1 taken 0
call    2 returned 2
        -:  288:	    if (argv[1][0] == '1') print_gift_card_info(thisone);
        -:  289:        else if (argv[1][0] == '2') gift_card_json(thisone);
       13:  290:        }
        -:  291:    
        -:  292:	return 0;
        -:  293:}
