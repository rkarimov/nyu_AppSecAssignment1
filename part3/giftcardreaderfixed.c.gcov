        -:    0:Source:giftcardreaderfixed.c
        -:    0:Source is newer than graph
        -:    1:/*
        -:    2: * Gift Card Reading Application
        -:    3: * Original Author: Shoddycorp's Cut-Rate Contracting
        -:    4: * Comments added by: Justin Cappos (JAC) and Brendan Dolan-Gavitt (BDG)
        -:    5: * Maintainer:
        -:    6: * Date: 8 July 2020
        -:    7: */
        -:    8:
        -:    9:
        -:   10:#include "giftcard.h"
        -:   11:
        -:   12:#include <stdio.h>
        -:   13:#include <strings.h>
        -:   14:#include <string.h> // adding to alleviate warning 
        -:   15:
        -:   16:// interpreter for THX-1138 assembly
function animate called 1 returned 100% blocks executed 45%
        1:   17:void animate(char *msg, unsigned char *program) {
        -:   18:    unsigned char regs[16];
        1:   19:    char *mptr = msg;
        1:   20:    unsigned char *pc = program;
        1:   21:    int i = 0;
        1:   22:    int zf = 0;
       12:   23:    while (1) {
        -:   24:        unsigned char op, arg1, arg2;
       13:   25:        op = *pc;
       13:   26:        arg1 = *(pc+1);
       13:   27:        arg2 = *(pc+2);
       13:   28:        switch (*pc) {
branch  0 taken 10
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 1
branch 10 taken 0
branch 11 taken 2
       10:   29:            case 0x00:
       10:   30:                break;
    #####:   31:            case 0x01:
    #####:   32:                regs[arg1] = *mptr;
    #####:   33:                break;
    #####:   34:            case 0x02:
    #####:   35:                *mptr = regs[arg1];
    #####:   36:                break;
    #####:   37:            case 0x03:
    #####:   38:                mptr += (char)arg1;
    #####:   39:                break;
    #####:   40:            case 0x04:
    #####:   41:                regs[arg2] = arg1;
    #####:   42:                break;
    #####:   43:            case 0x05:
    #####:   44:                regs[arg1] ^= regs[arg2];
    #####:   45:                zf = !regs[arg1];
    #####:   46:                break;
    #####:   47:            case 0x06:
    #####:   48:                regs[arg1] += regs[arg2];
    #####:   49:                zf = !regs[arg1];
    #####:   50:                break;
    #####:   51:            case 0x07:
    #####:   52:                puts(msg);
call    0 never executed
    #####:   53:                break;
    #####:   54:            case 0x08:
    #####:   55:                goto done;
        1:   56:            case 0x09:
        1:   57:                pc += (unsigned char)arg1; // HANG FIX: make this an unsigned character which only takes positive values  // https://www.cs.utah.edu/~germain/PPS/Topics/unsigned_integer.html
        1:   58:                break;
    #####:   59:            case 0x10:
    #####:   60:                if (zf) pc += (char)arg1;
branch  0 never executed
branch  1 never executed
    #####:   61:                break;
        -:   62:        }
       13:   63:        pc+=3;
       13:   64:        if (pc > program+256) break;
branch  0 taken 1 (fallthrough)
branch  1 taken 12
        -:   65:    }
        1:   66:done:
        1:   67:    return;
        -:   68:}
        -:   69:
function print_gift_card_info called 3 returned 100% blocks executed 73%
        3:   70:    void print_gift_card_info(struct this_gift_card *thisone) {
        -:   71:	struct gift_card_data *gcd_ptr;
        -:   72:	struct gift_card_record_data *gcrd_ptr;
        -:   73:	struct gift_card_amount_change *gcac_ptr;
        -:   74:    struct gift_card_program *gcp_ptr;
        3:   75:	gcd_ptr = thisone->gift_card_data;
        -:   76:
        3:   77:	printf("   Merchant ID: %32.32s\n",gcd_ptr->merchant_id);
call    0 returned 3
        3:   78:	printf("   Customer ID: %32.32s\n",gcd_ptr->customer_id);
call    0 returned 3
        3:   79:	printf("   Num records: %d\n",gcd_ptr->number_of_gift_card_records);
call    0 returned 3
 33554436:   80:	for(int i=0;i<gcd_ptr->number_of_gift_card_records; i++) {
branch  0 taken 33554433
branch  1 taken 3 (fallthrough)
 33554433:   81:  		gcrd_ptr = (struct gift_card_record_data *) gcd_ptr->gift_card_record_data[i];
 33554433:   82:		if (gcrd_ptr->type_of_record == 1) {
branch  0 taken 0 (fallthrough)
branch  1 taken 33554433
    #####:   83:			printf("      record_type: amount_change\n");
call    0 never executed
    #####:   84:			gcac_ptr = gcrd_ptr->actual_record;
    #####:   85:			printf("      amount_added: %d\n",gcac_ptr->amount_added);
call    0 never executed
    #####:   86:			if (gcac_ptr->amount_added>0) {
branch  0 never executed
branch  1 never executed
    #####:   87:				printf("      signature: %32.32s\n",gcac_ptr->actual_signature);
call    0 never executed
        -:   88:			}
        -:   89:		}	
 33554433:   90:		else if (gcrd_ptr->type_of_record == 2) {
branch  0 taken 0 (fallthrough)
branch  1 taken 33554433
    #####:   91:			printf("      record_type: message\n");
call    0 never executed
    #####:   92:			printf("      message: %s\n",(char *)gcrd_ptr->actual_record);
call    0 never executed
        -:   93:		}
 33554433:   94:		else if (gcrd_ptr->type_of_record == 3) {
branch  0 taken 1 (fallthrough)
branch  1 taken 33554432
        1:   95:            gcp_ptr = gcrd_ptr->actual_record;
        1:   96:			printf("      record_type: animated message\n");
call    0 returned 1
        1:   97:            printf("      message: %s\n", gcp_ptr->message);
call    0 returned 1
        1:   98:            printf("  [running embedded program]  \n");
call    0 returned 1
        1:   99:            animate(gcp_ptr->message, gcp_ptr->program);
call    0 returned 1
        -:  100:		}
        -:  101:	}
        3:  102:	printf("  Total value: %d\n\n",get_gift_card_value(thisone));
call    0 returned 3
call    1 returned 3
        3:  103:}
        -:  104:
        -:  105:// Added to support web functionalities
function gift_card_json called 0 returned 0% blocks executed 0%
    #####:  106:void gift_card_json(struct this_gift_card *thisone) {
        -:  107:    struct gift_card_data *gcd_ptr;
        -:  108:    struct gift_card_record_data *gcrd_ptr;
        -:  109:    struct gift_card_amount_change *gcac_ptr;
    #####:  110:    gcd_ptr = thisone->gift_card_data;
    #####:  111:    printf("{\n");
call    0 never executed
    #####:  112:    printf("  \"merchant_id\": \"%32.32s\",\n", gcd_ptr->merchant_id);
call    0 never executed
    #####:  113:    printf("  \"customer_id\": \"%32.32s\",\n", gcd_ptr->customer_id);
call    0 never executed
    #####:  114:    printf("  \"total_value\": %d,\n", get_gift_card_value(thisone));
call    0 never executed
call    1 never executed
    #####:  115:    printf("  \"records\": [\n");
call    0 never executed
        -:  116:
    #####:  117:	for(int i=0;i<gcd_ptr->number_of_gift_card_records; i++) {
branch  0 never executed
branch  1 never executed
    #####:  118:        gcrd_ptr = (struct gift_card_record_data *) gcd_ptr->gift_card_record_data[i];
    #####:  119:        printf("    {\n");
call    0 never executed
    #####:  120:        if (gcrd_ptr->type_of_record == 1) {
branch  0 never executed
branch  1 never executed
    #####:  121:            printf("      \"record_type\": \"amount_change\",\n");
call    0 never executed
    #####:  122:            gcac_ptr = gcrd_ptr->actual_record;
    #####:  123:            printf("      \"amount_added\": %d,\n",gcac_ptr->amount_added);
call    0 never executed
    #####:  124:            if (gcac_ptr->amount_added>0) {
branch  0 never executed
branch  1 never executed
    #####:  125:                printf("      \"signature\": \"%32.32s\"\n",gcac_ptr->actual_signature);
call    0 never executed
        -:  126:            }
        -:  127:        }
    #####:  128:        else if (gcrd_ptr->type_of_record == 2) {
branch  0 never executed
branch  1 never executed
    #####:  129:			printf("      \"record_type\": \"message\",\n");
call    0 never executed
    #####:  130:			printf("      \"message\": \"%s\"\n",(char *)gcrd_ptr->actual_record);
call    0 never executed
        -:  131:        }
    #####:  132:        else if (gcrd_ptr->type_of_record == 3) {
branch  0 never executed
branch  1 never executed
    #####:  133:            struct gift_card_program *gcp = gcrd_ptr->actual_record;
    #####:  134:			printf("      \"record_type\": \"animated message\",\n");
call    0 never executed
    #####:  135:			printf("      \"message\": \"%s\",\n",gcp->message);
call    0 never executed
        -:  136:            // programs are binary so we will hex for the json
    #####:  137:            char *hexchars = "01234567890abcdef";
        -:  138:            char program_hex[512+1];
    #####:  139:            program_hex[512] = '\0';
        -:  140:            int i;
    #####:  141:            for(i = 0; i < 256; i++) {
branch  0 never executed
branch  1 never executed
    #####:  142:                program_hex[i*2] = hexchars[((gcp->program[i] & 0xf0) >> 4)];
    #####:  143:                program_hex[i*2+1] = hexchars[(gcp->program[i] & 0x0f)];
        -:  144:            }
    #####:  145:			printf("      \"program\": \"%s\"\n",program_hex);
call    0 never executed
        -:  146:        }
    #####:  147:        if (i < gcd_ptr->number_of_gift_card_records-1)
branch  0 never executed
branch  1 never executed
    #####:  148:            printf("    },\n");
call    0 never executed
        -:  149:        else
    #####:  150:            printf("    }\n");
call    0 never executed
        -:  151:    }
    #####:  152:    printf("  ]\n");
call    0 never executed
    #####:  153:    printf("}\n");
call    0 never executed
    #####:  154:}
        -:  155:
function get_gift_card_value called 3 returned 100% blocks executed 86%
        3:  156:int get_gift_card_value(struct this_gift_card *thisone) {
        -:  157:	struct gift_card_data *gcd_ptr;
        -:  158:	struct gift_card_record_data *gcrd_ptr;
        -:  159:	struct gift_card_amount_change *gcac_ptr;
        3:  160:	int ret_count = 0;
        -:  161:
        3:  162:	gcd_ptr = thisone->gift_card_data;
 33554436:  163:	for(int i=0;i<gcd_ptr->number_of_gift_card_records; i++) {
branch  0 taken 33554433
branch  1 taken 3 (fallthrough)
 33554433:  164:  		gcrd_ptr = (struct gift_card_record_data *) gcd_ptr->gift_card_record_data[i];
 33554433:  165:		if (gcrd_ptr->type_of_record == 1) {
branch  0 taken 0 (fallthrough)
branch  1 taken 33554433
    #####:  166:			gcac_ptr = gcrd_ptr->actual_record;
    #####:  167:			ret_count += gcac_ptr->amount_added;
        -:  168:		}	
        -:  169:	}
        3:  170:	return ret_count;
        -:  171:}
        -:  172:
        -:  173:
        -:  174:
        -:  175:/* JAC: input_fd is misleading... It's a FILE type, not a fd */
function gift_card_reader called 3 returned 100% blocks executed 83%
        3:  176:struct this_gift_card *gift_card_reader(FILE *input_fd) {
        -:  177:
        3:  178:	struct this_gift_card *ret_val = malloc(sizeof(struct this_gift_card));
        -:  179:
        -:  180:    void *optr;
        -:  181:	void *ptr;
        -:  182:
        -:  183:	// Loop to do the whole file
        8:  184:	while (!feof(input_fd)) {
call    0 returned 8
branch  1 taken 5
branch  2 taken 3 (fallthrough)
        -:  185:
        -:  186:		struct gift_card_data *gcd_ptr;
        -:  187:		/* JAC: Why aren't return types checked? */
        -:  188:
        -:  189:        //crash1 fix
        -:  190:        // creating an unsigned int value for malloc  and read it in
        -:  191:        // using an unsigned int b/c the value will always have to be non-negative 
        -:  192:        // source https://www.cs.utah.edu/~germain/PPS/Topics/unsigned_integer.html
        5:  193:        unsigned int absolute_value = ret_val-> num_bytes;
        5:  194:        fread(&absolute_value, 4,1, input_fd);
call    0 returned 5
        -:  195:
        -:  196:		// Make something the size of the rest and read it in
        5:  197:		ptr = malloc(abs(absolute_value));
        5:  198:		fread(ptr, abs(absolute_value), 1, input_fd);
call    0 returned 5
        5:  199:        optr = ptr-4;
        -:  200:
        5:  201:		gcd_ptr = ret_val->gift_card_data = malloc(sizeof(struct gift_card_data));
        5:  202:		gcd_ptr->merchant_id = ptr;
        5:  203:		ptr += 32;	
        -:  204://		printf("VD: %d\n",(int)ptr - (int) gcd_ptr->merchant_id);
        5:  205:		gcd_ptr->customer_id = ptr;
        5:  206:		ptr += 32;	
        -:  207:		/* JAC: Something seems off here... */
        -:  208:
        -:  209:        // LOGIC FIX: changing this to int as one shouldn't store a  number as a char
        5:  210:		gcd_ptr->number_of_gift_card_records = *((int *)ptr);
        5:  211:		ptr += 4;
        -:  212:
        5:  213:		gcd_ptr->gift_card_record_data = (void *)malloc(gcd_ptr->number_of_gift_card_records*sizeof(void*));
        -:  214:
        -:  215:		// Now ptr points at the gift card recrod data
 33554443:  216:		for (int i=0; i<=gcd_ptr->number_of_gift_card_records; i++){
branch  0 taken 33554438
branch  1 taken 5 (fallthrough)
        -:  217:			//printf("i: %d\n",i);
        -:  218:			struct gift_card_record_data *gcrd_ptr;
 33554438:  219:			gcrd_ptr = gcd_ptr->gift_card_record_data[i] = malloc(sizeof(struct gift_card_record_data));
        -:  220:			struct gift_card_amount_change *gcac_ptr;
 33554438:  221:			gcac_ptr = gcrd_ptr->actual_record = malloc(sizeof(struct gift_card_record_data));
        -:  222:            struct gift_card_program *gcp_ptr;
 33554438:  223:			gcp_ptr = malloc(sizeof(struct gift_card_program));
        -:  224:
 33554438:  225:			gcrd_ptr->record_size_in_bytes = *((char *)ptr);
        -:  226:            //printf("rec at %x, %d bytes\n", ptr - optr, gcrd_ptr->record_size_in_bytes); 
 33554438:  227:			ptr += 4;	
        -:  228:			//printf("record_data: %d\n",gcrd_ptr->record_size_in_bytes);
 33554438:  229:			gcrd_ptr->type_of_record = *((char *)ptr);
 33554438:  230:			ptr += 4;	
        -:  231:            //printf("type of rec: %d\n", gcrd_ptr->type_of_record);
        -:  232:
        -:  233:			// amount change
 33554438:  234:			if (gcrd_ptr->type_of_record == 1) {
branch  0 taken 0 (fallthrough)
branch  1 taken 33554438
    #####:  235:				gcac_ptr->amount_added = *((int*) ptr);
    #####:  236:				ptr += 4;	
        -:  237:
        -:  238:				// don't need a sig if negative
        -:  239:				/* JAC: something seems off here */
        -:  240:				if (gcac_ptr < 0) break;
        -:  241:
    #####:  242:				gcac_ptr->actual_signature = ptr;
    #####:  243:				ptr+=32;
        -:  244:			}
        -:  245:			// message
 33554438:  246:			if (gcrd_ptr->type_of_record == 2) {
branch  0 taken 0 (fallthrough)
branch  1 taken 33554438
    #####:  247:				gcrd_ptr->actual_record = ptr;
        -:  248:				// advance by the string size + 1 for nul
        -:  249:                // BDG: does not seem right
    #####:  250:				ptr=ptr+strlen((char *)gcrd_ptr->actual_record)+1;
        -:  251:			}
        -:  252:            // BDG: never seen one of these in the wild
 33554438:  253:            if (gcrd_ptr->type_of_record == 3) {
branch  0 taken 1 (fallthrough)
branch  1 taken 33554437
        1:  254:                gcp_ptr->message = malloc(32);
        1:  255:                gcp_ptr->program = malloc(256);
        1:  256:                memcpy(gcp_ptr->message, ptr, 32);
        1:  257:                ptr+=32;
        1:  258:                memcpy(gcp_ptr->program, ptr, 256);
        1:  259:                ptr+=256;
        1:  260:                gcrd_ptr->actual_record = gcp_ptr;
        -:  261:            }
        -:  262:		}
        -:  263:	}
        3:  264:	return ret_val;
        -:  265:}
        -:  266:
        -:  267:// BDG: why not a local variable here?
        -:  268:struct this_gift_card *thisone;
        -:  269:
        -:  270:
        -:  271:/// CRASH 2 FIX -- empty argument passed 
function main called 18 returned 17% blocks executed 71%
       18:  272:int main(int argc, char **argv) {
        -:  273:    // BDG: no argument checking?
       18:  274:    	FILE *input_fd = fopen(argv[2],"r");
call    0 returned 18
       18:  275:        if (input_fd == NULL ) {
branch  0 taken 15 (fallthrough)
branch  1 taken 3
       15:  276:            printf("please re-enter the crash case, empty string passed!");
call    0 returned 15
       15:  277:            exit(EXIT_FAILURE);
call    0 returned 0
        -:  278:        }
        3:  279:        else if (argc < 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  280:        {
    #####:  281:            printf("please re-enter the crash case, empty string passed!");
call    0 never executed
    #####:  282:            exit(EXIT_FAILURE);
call    0 never executed
        -:  283:        }
        -:  284:        else {
        3:  285:	    thisone = gift_card_reader(input_fd);
call    0 returned 3
        3:  286:	    if (argv[1][0] == '1') print_gift_card_info(thisone);
branch  0 taken 3 (fallthrough)
branch  1 taken 0
call    2 returned 3
    #####:  287:        else if (argv[1][0] == '2') gift_card_json(thisone);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  288:        }
        -:  289:    
        3:  290:	return 0;
        -:  291:}
